function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

var styles = {"stackedBar":"_2SJG2","sectionLabel":"_2eP9c","caption":"_2jJU2"};

var isNumber = function isNumber(data) {
  return typeof data === "number";
};

var getSectionValue = function getSectionValue(section) {
  return isNumber(section) ? section : section.value;
};

var getSectionColor = function getSectionColor(section) {
  return isNumber(section) ? undefined : section.color;
};

function isBarDataValues(arr) {
  if (!Array.isArray(arr)) {
    return false;
  }

  if (!arr.every(function (elt) {
    return typeof elt !== "number";
  })) {
    return false;
  }

  return true;
}

var toPx = function toPx(size) {
  if (!size) return "0";
  return size + "px";
};

var capitalize = function capitalize(s) {
  if (typeof s !== "string") return "";
  return s.charAt(0).toUpperCase() + s.slice(1);
};

var sumSectionArray = function sumSectionArray(sectionArray) {
  if (sectionArray.length === 0) return 0;
  return sectionArray.map(function (section) {
    return getSectionValue(section);
  }).reduce(function (a, b) {
    return a + b;
  });
};

function MonoStackedBar(_ref) {
  var data = _ref.data,
      _ref$colors = _ref.colors,
      colors = _ref$colors === void 0 ? [] : _ref$colors,
      _ref$displayLabels = _ref.displayLabels,
      displayLabels = _ref$displayLabels === void 0 ? true : _ref$displayLabels,
      _ref$labelColor = _ref.labelColor,
      labelColor = _ref$labelColor === void 0 ? "white" : _ref$labelColor,
      _ref$unit = _ref.unit,
      unit = _ref$unit === void 0 ? "" : _ref$unit,
      width = _ref.width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 20 : _ref$height,
      _ref$radius = _ref.radius,
      radius = _ref$radius === void 0 ? 10 : _ref$radius;
  var sumValues = data.length ? data.map(function (section) {
    return getSectionValue(section);
  }).reduce(function (a, b) {
    return a + b;
  }) : 1;
  return React.createElement("div", {
    style: {
      maxWidth: width
    }
  }, React.createElement("div", {
    className: styles.stackedBar
  }, data.length && data.map(function (section, index) {
    var radiusPx = toPx(radius);
    var proportion = getSectionValue(section) * 100 / sumValues;
    return React.createElement("div", {
      key: index,
      style: {
        width: proportion + "%",
        height: height,
        borderRadius: data.length === 1 || proportion === 100 ? radiusPx : index === 0 || sumSectionArray(data.slice(0, index)) === 0 ? radiusPx + " 0 0 " + radiusPx : index === data.length - 1 || sumSectionArray(data.slice(index + 1)) === 0 ? "0 " + radiusPx + " " + radiusPx + " 0" : "0",
        backgroundColor: getSectionColor(section) || colors[index] || "#393986",
        display: "flex",
        alignItems: "center"
      },
      className: styles.section
    }, displayLabels && proportion > 10 && React.createElement("span", {
      style: {
        fontSize: height - height / 4,
        color: labelColor
      },
      className: styles.sectionLabel
    }, "" + Math.round(getSectionValue(section)) + unit));
  })), React.createElement("div", {
    className: styles.caption
  }, isBarDataValues(data) && data.filter(function (section) {
    return section.caption;
  }).length > 0 && data.map(function (section, index) {
    if (!section.caption) return React.createElement(React.Fragment, null);
    var proportion = getSectionValue(section) * 100 / sumValues;
    if (proportion < 10) return React.createElement(React.Fragment, null);
    return React.createElement("div", {
      key: index,
      style: {
        width: proportion + "%",
        fontSize: height - height / 3
      }
    }, capitalize(section.caption));
  })));
}

module.exports = MonoStackedBar;
//# sourceMappingURL=index.js.map
